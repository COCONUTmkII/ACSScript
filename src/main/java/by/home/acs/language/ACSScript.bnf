{
  parserClass="by.home.acs.language.parser.ACSScriptParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="ACSScript"
  psiImplClassSuffix="Impl"
  psiPackage="by.home.acs.language.psi"
  psiImplPackage="by.home.acs.language.psi.impl"

  elementTypeHolderClass="by.home.acs.language.ACSScriptTypes"
  elementTypeClass="by.home.acs.language.psi.ACSScriptElementType"
  tokenTypeClass="by.home.acs.language.psi.ACSScriptTokenType"

  psiImplUtilClass="by.home.acs.language.psi.impl.ACSScriptPsiImplUtil"
}

{
    tokens = [
        IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        WHITE_SPACE = 'regexp:\s+'
        NUMBER = 'regexp:[1-9][0-9]*'
        INTEGER = 'regexp:([0-9]{1,9}|1[0-9]{9}|2(0[0-9]{8}|1([0-3][0-9]{7}|4([0-6][0-9]{6}|7([0-3][0-9]{5}|4([0-7][0-9]{4}|8([0-2][0-9]{3}|3([0-5][0-9]{2}|6([0-3][0-9]|4[0-7])))))))))|-([0-9]{1,9}|1[0-9]{9}|2(0[0-9]{8}|1([0-3][0-9]{7}|4([0-6][0-9]{6}|7([0-3][0-9]{5}|4([0-7][0-9]{4}|8([0-2][0-9]{3}|3([0-5][0-9]{2}|6([0-3][0-9]|4[0-8])))))))))'
        STRING = 'regexp:^"(.*?)"'
    ]
}


ACSScriptFile ::= (COMMENT|Definition*)

Definition ::= (FunctionDefinition | ScriptDefinition | DirectivesDeclaration | GlobalModifier | VariableDefinition)

FunctionDefinition ::= function (VoidType | Type) IDENTIFIER '(' ')'  '{' FunctionBody '}'

ScriptDefinition ::= SCRIPT (NUMBER | STRING) (ScriptType)? ('(' Type IDENTIFIER')' | '(' VoidType ')')?  (NetType)? '{' ScriptBody '}'

ScriptType ::= OPEN | ENTER | RETURN | RESPAWN | DEATH | LIGHTNING | UNLOADING | DISCONNECT | KILL | REOPEN

DirectivesDeclaration ::= IncludeDeclaration | ImportDeclaration | DefineDeclaration | LibraryDeclaration

IncludeDeclaration ::= '#' include STRING

ImportDeclaration ::= '#' import STRING

DefineDeclaration ::= '#' define IDENTIFIER IDENTIFIER  // need to add operator support here too and numbers

LibraryDeclaration ::= '#' library STRING

GlobalModifier ::= (global | world) Type IDENTIFIER':'IDENTIFIER';'

StaticModifier ::= static

NetType ::= net

VoidType ::= void

FunctionBody ::= Statement*

Statement ::= VariableDefinition | AssignmentStatement | FunctionInvocation | ConditionalOperator | Loops | ReturnOperator

ScriptBody ::= ScriptStatement*

ScriptStatement ::= VariableDefinition | AssignmentStatement | FunctionInvocation | ConditionalOperator | Loops

CaseOperator ::=   case (IDENTIFIER | NUMBER | STRING) ':'  (FunctionInvocation | VariableDefinition)? (SwitchStatement)?  (break ';')? CaseOperator? (default ':' FunctionInvocation)?

VariableDefinition ::= StaticModifier? (ArrayType | Type) IDENTIFIER (';' | ('=' (FunctionInvocation | VariableInitialization | Operator)))

VariableInitialization ::= (INTEGER | STRING | LogicalType | ArrayInitializer)  ';' // Classify initialization directly to each type

Operator ::=  IDENTIFIER ('=' | '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '~' | '<<' | '>>' | '==' | '!=' | '>' | '<' | '>=' | '<=' | '&&' | '||' | '!' | '+=' | '++' | '-=' | '--' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=') IDENTIFIER? NUMBER? STRING?';'

Loops ::= forLoop | whileLoop | untilLoop | doWhileLoop | doUntilLoop

forLoop ::= for '(' IDENTIFIER ';' LogicalType ';' IDENTIFIER ')' '{' Statement '}' // not finished yet cuz need to fix operators

whileLoop ::= while '(' LogicalType ')' '{' Statement? '}'

untilLoop ::= until '(' LogicalType ')' '{' Statement? '}'

doWhileLoop ::= do '{' Statement? '}' while '(' LogicalType ')' ';'

doUntilLoop ::= do '{' Statement? '}' until '(' LogicalType ')' ';'

Type ::= (int | str | bool)

ArrayType ::= (Type) '[' ']'

ArrayInitializer ::= '{' ArrayInitializers? '}'

ArrayInitializers ::= (INTEGER | STRING) (',' ArrayInitializers)?

LogicalType ::= true | false

ReturnOperator ::= return ';' | return IDENTIFIER ';' // Use something else but IDENTIFIER later

AssignmentStatement ::= IDENTIFIER '=' FunctionInvocation

FunctionInvocation ::= IDENTIFIER '(' ')' ';' ReturnOperator?

ConditionalOperator ::= IfThenStatement | IfThenElseStatement |  SwitchStatement

IfThenStatement ::= if '(' LogicalType ')' Statement

IfThenElseStatement ::= if '(' LogicalType ')' '{' FunctionBody '}' (else ('{' FunctionBody '}' | IfThenElseStatement) )?

SwitchStatement ::= switch '(' (IDENTIFIER | NUMBER) ')' '{' CaseOperator '}'



