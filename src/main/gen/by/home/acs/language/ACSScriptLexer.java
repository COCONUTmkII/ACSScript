/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package by.home.acs.language;

import by.home.acs.language.psi.ACSScriptTokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ACSSCript.flex</tt>
 */
public class ACSScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\5\2\6\1\5\22\0\1\10\1\0\1\4\7\0\1\12\4\0\1\11\1\2\11\3\7\0\1"+
    "\46\1\1\1\55\1\50\1\41\1\1\1\54\1\51\1\53\1\1\1\56\1\52\1\1\1\42\1\37\1\40"+
    "\1\1\1\44\1\33\1\43\1\45\1\1\1\47\3\1\4\0\1\1\1\0\1\31\1\30\1\15\1\20\1\21"+
    "\1\34\1\27\1\57\1\13\1\1\1\60\1\16\1\22\1\14\1\24\1\23\1\1\1\25\1\36\1\26"+
    "\1\17\1\35\1\32\3\1\12\0\1\7\242\0\2\7\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\26\2"+
    "\1\0\1\5\1\0\2\2\1\6\4\2\1\7\27\2"+
    "\1\10\1\0\1\2\1\11\1\2\1\12\15\2\1\13"+
    "\2\2\1\14\13\2\1\5\2\2\1\15\2\2\1\16"+
    "\1\2\1\17\1\2\1\20\6\2\1\21\1\2\1\22"+
    "\10\2\1\23\2\2\1\24\3\2\1\25\1\26\1\27"+
    "\2\2\1\30\1\2\1\31\4\2\1\32\3\2\1\33"+
    "\1\2\1\34\1\35\1\36\1\2\1\37\1\2\1\40"+
    "\3\2\1\41\1\42\1\2\1\43\3\2\1\44\3\2"+
    "\1\45\1\2\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\142\0\u0682\0\u06b3\0\u06e4\0\u0715\0\142"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\61"+
    "\0\u0bad\0\u0bde\0\142\0\u0c0f\0\142\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\142\0\u0ebd\0\u0eee\0\142\0\u0f1f\0\u0f50"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\u1109\0\61\0\u113a\0\u116b\0\142\0\u119c\0\u11cd\0\142"+
    "\0\u11fe\0\142\0\u122f\0\142\0\u1260\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\142\0\u1386\0\142\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\142\0\u153f\0\u1570"+
    "\0\142\0\u15a1\0\u15d2\0\u1603\0\142\0\142\0\142\0\u1634"+
    "\0\u1665\0\142\0\u1696\0\142\0\u16c7\0\u16f8\0\u1729\0\u175a"+
    "\0\142\0\u178b\0\u17bc\0\u17ed\0\142\0\u181e\0\142\0\142"+
    "\0\142\0\u184f\0\142\0\u1880\0\142\0\u18b1\0\u18e2\0\u1913"+
    "\0\142\0\142\0\u1944\0\142\0\u1975\0\u19a6\0\u19d7\0\142"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\142\0\u1a9b\0\142\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\2\6\1\2\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\3\1\13\1\14"+
    "\1\15\3\3\1\16\1\17\1\20\1\21\1\3\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\3\1\30\2\3"+
    "\1\31\1\32\2\3\1\33\1\3\1\34\3\3\1\35"+
    "\2\3\62\0\3\3\7\0\46\3\2\0\2\4\55\0"+
    "\5\36\3\0\51\36\5\0\2\6\1\0\1\6\61\0"+
    "\1\37\1\40\47\0\3\3\7\0\1\3\1\41\5\3"+
    "\1\42\11\3\1\43\24\3\1\0\3\3\7\0\6\3"+
    "\1\44\37\3\1\0\3\3\7\0\16\3\1\45\27\3"+
    "\1\0\3\3\7\0\1\3\1\46\44\3\1\0\3\3"+
    "\7\0\6\3\1\47\2\3\1\50\34\3\1\0\3\3"+
    "\7\0\3\3\1\51\42\3\1\0\3\3\7\0\6\3"+
    "\1\52\37\3\1\0\3\3\7\0\12\3\1\53\33\3"+
    "\1\0\3\3\7\0\3\3\1\54\42\3\1\0\3\3"+
    "\7\0\11\3\1\55\1\56\33\3\1\0\3\3\7\0"+
    "\11\3\1\57\32\3\1\60\1\3\1\0\3\3\7\0"+
    "\2\3\1\61\43\3\1\0\3\3\7\0\4\3\1\62"+
    "\4\3\1\63\4\3\1\64\27\3\1\0\3\3\7\0"+
    "\11\3\1\65\34\3\1\0\3\3\7\0\13\3\1\66"+
    "\3\3\1\67\26\3\1\0\3\3\7\0\25\3\1\70"+
    "\20\3\1\0\3\3\7\0\27\3\1\71\16\3\1\0"+
    "\3\3\7\0\26\3\1\72\17\3\1\0\3\3\7\0"+
    "\27\3\1\73\16\3\1\0\3\3\7\0\26\3\1\74"+
    "\11\3\1\75\5\3\1\0\3\3\7\0\40\3\1\76"+
    "\5\3\1\0\3\3\7\0\40\3\1\77\5\3\4\36"+
    "\1\100\54\36\5\37\1\0\53\37\12\40\1\101\46\40"+
    "\1\0\3\3\7\0\2\3\1\102\10\3\1\103\32\3"+
    "\1\0\3\3\7\0\10\3\1\104\35\3\1\0\3\3"+
    "\7\0\13\3\1\105\32\3\1\0\3\3\7\0\23\3"+
    "\1\106\22\3\1\0\3\3\7\0\13\3\1\107\32\3"+
    "\1\0\3\3\7\0\21\3\1\110\24\3\1\0\3\3"+
    "\7\0\23\3\1\111\22\3\1\0\3\3\7\0\13\3"+
    "\1\112\32\3\1\0\3\3\7\0\4\3\1\113\41\3"+
    "\1\0\3\3\7\0\11\3\1\114\34\3\1\0\3\3"+
    "\7\0\11\3\1\115\34\3\1\0\3\3\7\0\6\3"+
    "\1\116\37\3\1\0\3\3\7\0\12\3\1\117\33\3"+
    "\1\0\3\3\7\0\1\120\45\3\1\0\3\3\7\0"+
    "\12\3\1\121\33\3\1\0\3\3\7\0\1\3\1\122"+
    "\44\3\1\0\3\3\7\0\12\3\1\123\33\3\1\0"+
    "\3\3\7\0\3\3\1\124\42\3\1\0\3\3\7\0"+
    "\1\125\45\3\1\0\3\3\7\0\12\3\1\126\33\3"+
    "\1\0\3\3\7\0\1\127\45\3\1\0\3\3\7\0"+
    "\26\3\1\130\17\3\1\0\3\3\7\0\30\3\1\131"+
    "\15\3\1\0\3\3\7\0\20\3\1\132\3\3\1\133"+
    "\3\3\1\134\15\3\1\0\3\3\7\0\37\3\1\135"+
    "\6\3\1\0\3\3\7\0\33\3\1\136\12\3\1\0"+
    "\3\3\7\0\20\3\1\137\25\3\1\0\3\3\7\0"+
    "\41\3\1\140\4\3\1\0\3\3\7\0\37\3\1\141"+
    "\6\3\11\40\1\142\1\101\46\40\1\0\3\3\7\0"+
    "\3\3\1\143\42\3\1\0\3\3\7\0\11\3\1\144"+
    "\34\3\1\0\3\3\7\0\6\3\1\145\37\3\1\0"+
    "\3\3\7\0\1\146\45\3\1\0\3\3\7\0\16\3"+
    "\1\147\27\3\1\0\3\3\7\0\6\3\1\150\37\3"+
    "\1\0\3\3\7\0\4\3\1\151\41\3\1\0\3\3"+
    "\7\0\6\3\1\152\37\3\1\0\3\3\7\0\15\3"+
    "\1\153\30\3\1\0\3\3\7\0\3\3\1\154\42\3"+
    "\1\0\3\3\7\0\16\3\1\155\27\3\1\0\3\3"+
    "\7\0\3\3\1\156\42\3\1\0\3\3\7\0\3\3"+
    "\1\157\42\3\1\0\3\3\7\0\1\160\45\3\1\0"+
    "\3\3\7\0\2\3\1\161\43\3\1\0\3\3\7\0"+
    "\23\3\1\162\22\3\1\0\3\3\7\0\5\3\1\163"+
    "\40\3\1\0\3\3\7\0\13\3\1\164\32\3\1\0"+
    "\3\3\7\0\27\3\1\165\16\3\1\0\3\3\7\0"+
    "\26\3\1\166\17\3\1\0\3\3\7\0\25\3\1\167"+
    "\20\3\1\0\3\3\7\0\25\3\1\170\20\3\1\0"+
    "\3\3\7\0\32\3\1\171\13\3\1\0\3\3\7\0"+
    "\24\3\1\172\21\3\1\0\3\3\7\0\30\3\1\173"+
    "\15\3\1\0\3\3\7\0\42\3\1\174\3\3\1\0"+
    "\3\3\7\0\36\3\1\175\7\3\1\0\3\3\7\0"+
    "\37\3\1\176\6\3\1\0\3\3\7\0\4\3\1\177"+
    "\41\3\1\0\3\3\7\0\12\3\1\200\33\3\1\0"+
    "\3\3\7\0\3\3\1\201\42\3\1\0\3\3\7\0"+
    "\4\3\1\202\41\3\1\0\3\3\7\0\12\3\1\203"+
    "\33\3\1\0\3\3\7\0\16\3\1\204\27\3\1\0"+
    "\3\3\7\0\45\3\1\205\1\0\3\3\7\0\5\3"+
    "\1\206\40\3\1\0\3\3\7\0\6\3\1\207\37\3"+
    "\1\0\3\3\7\0\10\3\1\210\35\3\1\0\3\3"+
    "\7\0\13\3\1\211\32\3\1\0\3\3\7\0\6\3"+
    "\1\212\37\3\1\0\3\3\7\0\2\3\1\213\43\3"+
    "\1\0\3\3\7\0\31\3\1\214\14\3\1\0\3\3"+
    "\7\0\33\3\1\215\12\3\1\0\3\3\7\0\26\3"+
    "\1\216\17\3\1\0\3\3\7\0\31\3\1\217\14\3"+
    "\1\0\3\3\7\0\33\3\1\220\12\3\1\0\3\3"+
    "\7\0\36\3\1\221\7\3\1\0\3\3\7\0\24\3"+
    "\1\222\21\3\1\0\3\3\7\0\30\3\1\223\15\3"+
    "\1\0\3\3\7\0\5\3\1\224\40\3\1\0\3\3"+
    "\7\0\13\3\1\225\32\3\1\0\3\3\7\0\3\3"+
    "\1\226\42\3\1\0\3\3\7\0\1\3\1\227\44\3"+
    "\1\0\3\3\7\0\3\3\1\230\42\3\1\0\3\3"+
    "\7\0\13\3\1\231\32\3\1\0\3\3\7\0\1\232"+
    "\45\3\1\0\3\3\7\0\44\3\1\233\1\3\1\0"+
    "\3\3\7\0\34\3\1\234\11\3\1\0\3\3\7\0"+
    "\27\3\1\235\16\3\1\0\3\3\7\0\27\3\1\227"+
    "\16\3\1\0\3\3\7\0\35\3\1\236\10\3\1\0"+
    "\3\3\7\0\27\3\1\237\16\3\1\0\3\3\7\0"+
    "\27\3\1\240\16\3\1\0\3\3\7\0\6\3\1\241"+
    "\37\3\1\0\3\3\7\0\13\3\1\242\32\3\1\0"+
    "\3\3\7\0\11\3\1\243\34\3\1\0\3\3\7\0"+
    "\27\3\1\244\16\3\1\0\3\3\7\0\40\3\1\245"+
    "\5\3\1\0\3\3\7\0\27\3\1\246\16\3\1\0"+
    "\3\3\7\0\40\3\1\247\5\3\1\0\3\3\7\0"+
    "\1\3\1\250\44\3\1\0\3\3\7\0\27\3\1\251"+
    "\16\3\1\0\3\3\7\0\26\3\1\252\17\3\1\0"+
    "\3\3\7\0\27\3\1\253\16\3\1\0\3\3\7\0"+
    "\41\3\1\254\4\3\1\0\3\3\7\0\42\3\1\255"+
    "\3\3\1\0\3\3\7\0\41\3\1\256\4\3\1\0"+
    "\3\3\7\0\30\3\1\257\15\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\1\0\1\1\1\0\37\1\1\11"+
    "\1\0\40\1\1\11\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ACSScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 40: break;
          case 2: 
            { return ACSScriptTypes.IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return ACSScriptTypes.NUMBER;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return ACSScriptTypes.COMMENT;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return ACSScriptTypes.IF;
            } 
            // fall through
          case 45: break;
          case 7: 
            { return ACSScriptTypes.DO;
            } 
            // fall through
          case 46: break;
          case 8: 
            { return ACSScriptTypes.STRING;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return ACSScriptTypes.INT;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return ACSScriptTypes.NET;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return ACSScriptTypes.FOR;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return ACSScriptTypes.STR;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return ACSScriptTypes.CASE;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return ACSScriptTypes.ELSE;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return ACSScriptTypes.TRUE;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return ACSScriptTypes.BOOL;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return ACSScriptTypes.VOID;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return ACSScriptTypes.OPEN;
            } 
            // fall through
          case 57: break;
          case 19: 
            { return ACSScriptTypes.KILL;
            } 
            // fall through
          case 58: break;
          case 20: 
            { return ACSScriptTypes.UNTIL;
            } 
            // fall through
          case 59: break;
          case 21: 
            { return ACSScriptTypes.BREAK;
            } 
            // fall through
          case 60: break;
          case 22: 
            { return ACSScriptTypes.WORLD;
            } 
            // fall through
          case 61: break;
          case 23: 
            { return ACSScriptTypes.WHILE;
            } 
            // fall through
          case 62: break;
          case 24: 
            { return ACSScriptTypes.FALSE;
            } 
            // fall through
          case 63: break;
          case 25: 
            { return ACSScriptTypes.ENTER;
            } 
            // fall through
          case 64: break;
          case 26: 
            { return ACSScriptTypes.DEATH;
            } 
            // fall through
          case 65: break;
          case 27: 
            { return ACSScriptTypes.IMPORT;
            } 
            // fall through
          case 66: break;
          case 28: 
            { return ACSScriptTypes.RETURN;
            } 
            // fall through
          case 67: break;
          case 29: 
            { return ACSScriptTypes.GLOBAL;
            } 
            // fall through
          case 68: break;
          case 30: 
            { return ACSScriptTypes.SCRIPT;
            } 
            // fall through
          case 69: break;
          case 31: 
            { return ACSScriptTypes.SWITCH;
            } 
            // fall through
          case 70: break;
          case 32: 
            { return ACSScriptTypes.REOPEN;
            } 
            // fall through
          case 71: break;
          case 33: 
            { return ACSScriptTypes.INCLUDE;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return ACSScriptTypes.DEFAULT;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return ACSScriptTypes.RESPAWN;
            } 
            // fall through
          case 74: break;
          case 36: 
            { return ACSScriptTypes.FUNCTION;
            } 
            // fall through
          case 75: break;
          case 37: 
            { return ACSScriptTypes.UNLOADING;
            } 
            // fall through
          case 76: break;
          case 38: 
            { return ACSScriptTypes.LIGHTNING;
            } 
            // fall through
          case 77: break;
          case 39: 
            { return ACSScriptTypes.DISCONNECT;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
