/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package by.home.acs.language;

import by.home.acs.language.psi.ACSScriptTokenType;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ACSSCript.flex</tt>
 */
public class ACSScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\7\4\5\22\0\1\7\1\0\1\4\15\0\1\2\11\3\7\0\1\43\1\1\1\52\1\45\1\36\1"+
    "\1\1\51\1\46\1\50\1\1\1\53\1\47\1\1\1\37\1\34\1\35\1\1\1\41\1\30\1\40\1\42"+
    "\1\1\1\44\3\1\4\0\1\1\1\0\1\26\1\25\1\12\1\15\1\16\1\31\1\24\1\54\1\10\1\1"+
    "\1\55\1\13\1\17\1\11\1\21\1\20\1\1\1\22\1\33\1\23\1\14\1\32\1\27\3\1\12\0"+
    "\1\6\242\0\2\6\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\26\2\1\0"+
    "\2\2\1\5\4\2\1\6\27\2\1\7\1\2\1\10"+
    "\1\2\1\11\15\2\1\12\2\2\1\13\15\2\1\14"+
    "\2\2\1\15\1\2\1\16\1\2\1\17\6\2\1\20"+
    "\1\2\1\21\10\2\1\22\2\2\1\23\3\2\1\24"+
    "\1\25\1\26\2\2\1\27\1\2\1\30\4\2\1\31"+
    "\3\2\1\32\1\2\1\33\1\34\1\35\1\2\1\36"+
    "\1\2\1\37\3\2\1\40\1\41\1\2\1\42\3\2"+
    "\1\43\3\2\1\44\1\2\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\134"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\134\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\56\0\u0a6c\0\134\0\u0a9a"+
    "\0\134\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\134\0\u0d1e"+
    "\0\u0d4c\0\134\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\134"+
    "\0\u0fd0\0\u0ffe\0\134\0\u102c\0\134\0\u105a\0\134\0\u1088"+
    "\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\134\0\u119c\0\134"+
    "\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\134\0\u133a\0\u1368\0\134\0\u1396\0\u13c4\0\u13f2\0\134"+
    "\0\134\0\134\0\u1420\0\u144e\0\134\0\u147c\0\134\0\u14aa"+
    "\0\u14d8\0\u1506\0\u1534\0\134\0\u1562\0\u1590\0\u15be\0\134"+
    "\0\u15ec\0\134\0\134\0\134\0\u161a\0\134\0\u1648\0\134"+
    "\0\u1676\0\u16a4\0\u16d2\0\134\0\134\0\u1700\0\134\0\u172e"+
    "\0\u175c\0\u178a\0\134\0\u17b8\0\u17e6\0\u1814\0\134\0\u1842"+
    "\0\134\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\2\1\6"+
    "\1\7\1\10\1\11\1\3\1\12\1\13\1\14\3\3"+
    "\1\15\1\16\1\17\1\20\1\3\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\3\1\27\2\3\1\30\1\31"+
    "\2\3\1\32\1\3\1\33\3\3\1\34\2\3\57\0"+
    "\3\3\4\0\46\3\2\0\2\4\52\0\5\35\2\0"+
    "\47\35\5\0\1\6\1\0\1\6\47\0\3\3\4\0"+
    "\1\3\1\36\5\3\1\37\11\3\1\40\24\3\1\0"+
    "\3\3\4\0\6\3\1\41\37\3\1\0\3\3\4\0"+
    "\16\3\1\42\27\3\1\0\3\3\4\0\1\3\1\43"+
    "\44\3\1\0\3\3\4\0\6\3\1\44\2\3\1\45"+
    "\34\3\1\0\3\3\4\0\3\3\1\46\42\3\1\0"+
    "\3\3\4\0\6\3\1\47\37\3\1\0\3\3\4\0"+
    "\12\3\1\50\33\3\1\0\3\3\4\0\3\3\1\51"+
    "\42\3\1\0\3\3\4\0\11\3\1\52\1\53\33\3"+
    "\1\0\3\3\4\0\11\3\1\54\32\3\1\55\1\3"+
    "\1\0\3\3\4\0\2\3\1\56\43\3\1\0\3\3"+
    "\4\0\4\3\1\57\4\3\1\60\4\3\1\61\27\3"+
    "\1\0\3\3\4\0\11\3\1\62\34\3\1\0\3\3"+
    "\4\0\13\3\1\63\3\3\1\64\26\3\1\0\3\3"+
    "\4\0\25\3\1\65\20\3\1\0\3\3\4\0\27\3"+
    "\1\66\16\3\1\0\3\3\4\0\26\3\1\67\17\3"+
    "\1\0\3\3\4\0\27\3\1\70\16\3\1\0\3\3"+
    "\4\0\26\3\1\71\11\3\1\72\5\3\1\0\3\3"+
    "\4\0\40\3\1\73\5\3\1\0\3\3\4\0\40\3"+
    "\1\74\5\3\4\35\1\75\51\35\1\0\3\3\4\0"+
    "\2\3\1\76\10\3\1\77\32\3\1\0\3\3\4\0"+
    "\10\3\1\100\35\3\1\0\3\3\4\0\13\3\1\101"+
    "\32\3\1\0\3\3\4\0\23\3\1\102\22\3\1\0"+
    "\3\3\4\0\13\3\1\103\32\3\1\0\3\3\4\0"+
    "\21\3\1\104\24\3\1\0\3\3\4\0\23\3\1\105"+
    "\22\3\1\0\3\3\4\0\13\3\1\106\32\3\1\0"+
    "\3\3\4\0\4\3\1\107\41\3\1\0\3\3\4\0"+
    "\11\3\1\110\34\3\1\0\3\3\4\0\11\3\1\111"+
    "\34\3\1\0\3\3\4\0\6\3\1\112\37\3\1\0"+
    "\3\3\4\0\12\3\1\113\33\3\1\0\3\3\4\0"+
    "\1\114\45\3\1\0\3\3\4\0\12\3\1\115\33\3"+
    "\1\0\3\3\4\0\1\3\1\116\44\3\1\0\3\3"+
    "\4\0\12\3\1\117\33\3\1\0\3\3\4\0\3\3"+
    "\1\120\42\3\1\0\3\3\4\0\1\121\45\3\1\0"+
    "\3\3\4\0\12\3\1\122\33\3\1\0\3\3\4\0"+
    "\1\123\45\3\1\0\3\3\4\0\26\3\1\124\17\3"+
    "\1\0\3\3\4\0\30\3\1\125\15\3\1\0\3\3"+
    "\4\0\20\3\1\126\3\3\1\127\3\3\1\130\15\3"+
    "\1\0\3\3\4\0\37\3\1\131\6\3\1\0\3\3"+
    "\4\0\33\3\1\132\12\3\1\0\3\3\4\0\20\3"+
    "\1\133\25\3\1\0\3\3\4\0\41\3\1\134\4\3"+
    "\1\0\3\3\4\0\37\3\1\135\6\3\1\0\3\3"+
    "\4\0\3\3\1\136\42\3\1\0\3\3\4\0\11\3"+
    "\1\137\34\3\1\0\3\3\4\0\6\3\1\140\37\3"+
    "\1\0\3\3\4\0\1\141\45\3\1\0\3\3\4\0"+
    "\16\3\1\142\27\3\1\0\3\3\4\0\6\3\1\143"+
    "\37\3\1\0\3\3\4\0\4\3\1\144\41\3\1\0"+
    "\3\3\4\0\6\3\1\145\37\3\1\0\3\3\4\0"+
    "\15\3\1\146\30\3\1\0\3\3\4\0\3\3\1\147"+
    "\42\3\1\0\3\3\4\0\16\3\1\150\27\3\1\0"+
    "\3\3\4\0\3\3\1\151\42\3\1\0\3\3\4\0"+
    "\3\3\1\152\42\3\1\0\3\3\4\0\1\153\45\3"+
    "\1\0\3\3\4\0\2\3\1\154\43\3\1\0\3\3"+
    "\4\0\23\3\1\155\22\3\1\0\3\3\4\0\5\3"+
    "\1\156\40\3\1\0\3\3\4\0\13\3\1\157\32\3"+
    "\1\0\3\3\4\0\27\3\1\160\16\3\1\0\3\3"+
    "\4\0\26\3\1\161\17\3\1\0\3\3\4\0\25\3"+
    "\1\162\20\3\1\0\3\3\4\0\25\3\1\163\20\3"+
    "\1\0\3\3\4\0\32\3\1\164\13\3\1\0\3\3"+
    "\4\0\24\3\1\165\21\3\1\0\3\3\4\0\30\3"+
    "\1\166\15\3\1\0\3\3\4\0\42\3\1\167\3\3"+
    "\1\0\3\3\4\0\36\3\1\170\7\3\1\0\3\3"+
    "\4\0\37\3\1\171\6\3\1\0\3\3\4\0\4\3"+
    "\1\172\41\3\1\0\3\3\4\0\12\3\1\173\33\3"+
    "\1\0\3\3\4\0\3\3\1\174\42\3\1\0\3\3"+
    "\4\0\4\3\1\175\41\3\1\0\3\3\4\0\12\3"+
    "\1\176\33\3\1\0\3\3\4\0\16\3\1\177\27\3"+
    "\1\0\3\3\4\0\45\3\1\200\1\0\3\3\4\0"+
    "\5\3\1\201\40\3\1\0\3\3\4\0\6\3\1\202"+
    "\37\3\1\0\3\3\4\0\10\3\1\203\35\3\1\0"+
    "\3\3\4\0\13\3\1\204\32\3\1\0\3\3\4\0"+
    "\6\3\1\205\37\3\1\0\3\3\4\0\2\3\1\206"+
    "\43\3\1\0\3\3\4\0\31\3\1\207\14\3\1\0"+
    "\3\3\4\0\33\3\1\210\12\3\1\0\3\3\4\0"+
    "\26\3\1\211\17\3\1\0\3\3\4\0\31\3\1\212"+
    "\14\3\1\0\3\3\4\0\33\3\1\213\12\3\1\0"+
    "\3\3\4\0\36\3\1\214\7\3\1\0\3\3\4\0"+
    "\24\3\1\215\21\3\1\0\3\3\4\0\30\3\1\216"+
    "\15\3\1\0\3\3\4\0\5\3\1\217\40\3\1\0"+
    "\3\3\4\0\13\3\1\220\32\3\1\0\3\3\4\0"+
    "\3\3\1\221\42\3\1\0\3\3\4\0\1\3\1\222"+
    "\44\3\1\0\3\3\4\0\3\3\1\223\42\3\1\0"+
    "\3\3\4\0\13\3\1\224\32\3\1\0\3\3\4\0"+
    "\1\225\45\3\1\0\3\3\4\0\44\3\1\226\1\3"+
    "\1\0\3\3\4\0\34\3\1\227\11\3\1\0\3\3"+
    "\4\0\27\3\1\230\16\3\1\0\3\3\4\0\27\3"+
    "\1\222\16\3\1\0\3\3\4\0\35\3\1\231\10\3"+
    "\1\0\3\3\4\0\27\3\1\232\16\3\1\0\3\3"+
    "\4\0\27\3\1\233\16\3\1\0\3\3\4\0\6\3"+
    "\1\234\37\3\1\0\3\3\4\0\13\3\1\235\32\3"+
    "\1\0\3\3\4\0\11\3\1\236\34\3\1\0\3\3"+
    "\4\0\27\3\1\237\16\3\1\0\3\3\4\0\40\3"+
    "\1\240\5\3\1\0\3\3\4\0\27\3\1\241\16\3"+
    "\1\0\3\3\4\0\40\3\1\242\5\3\1\0\3\3"+
    "\4\0\1\3\1\243\44\3\1\0\3\3\4\0\27\3"+
    "\1\244\16\3\1\0\3\3\4\0\26\3\1\245\17\3"+
    "\1\0\3\3\4\0\27\3\1\246\16\3\1\0\3\3"+
    "\4\0\41\3\1\247\4\3\1\0\3\3\4\0\42\3"+
    "\1\250\3\3\1\0\3\3\4\0\41\3\1\251\4\3"+
    "\1\0\3\3\4\0\30\3\1\252\15\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6256];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\32\1\1\0\37\1\1\11\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ACSScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return ACSScriptTypes.IDENTIFIER;
            } 
            // fall through
          case 40: break;
          case 3: 
            { return ACSScriptTypes.NUMBER;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return ACSScriptTypes.IF;
            } 
            // fall through
          case 43: break;
          case 6: 
            { return ACSScriptTypes.DO;
            } 
            // fall through
          case 44: break;
          case 7: 
            { return ACSScriptTypes.STRING;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return ACSScriptTypes.INT;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return ACSScriptTypes.NET;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return ACSScriptTypes.FOR;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return ACSScriptTypes.STR;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return ACSScriptTypes.CASE;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return ACSScriptTypes.ELSE;
            } 
            // fall through
          case 51: break;
          case 14: 
            { return ACSScriptTypes.TRUE;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return ACSScriptTypes.BOOL;
            } 
            // fall through
          case 53: break;
          case 16: 
            { return ACSScriptTypes.VOID;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return ACSScriptTypes.OPEN;
            } 
            // fall through
          case 55: break;
          case 18: 
            { return ACSScriptTypes.KILL;
            } 
            // fall through
          case 56: break;
          case 19: 
            { return ACSScriptTypes.UNTIL;
            } 
            // fall through
          case 57: break;
          case 20: 
            { return ACSScriptTypes.BREAK;
            } 
            // fall through
          case 58: break;
          case 21: 
            { return ACSScriptTypes.WORLD;
            } 
            // fall through
          case 59: break;
          case 22: 
            { return ACSScriptTypes.WHILE;
            } 
            // fall through
          case 60: break;
          case 23: 
            { return ACSScriptTypes.FALSE;
            } 
            // fall through
          case 61: break;
          case 24: 
            { return ACSScriptTypes.ENTER;
            } 
            // fall through
          case 62: break;
          case 25: 
            { return ACSScriptTypes.DEATH;
            } 
            // fall through
          case 63: break;
          case 26: 
            { return ACSScriptTypes.IMPORT;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return ACSScriptTypes.RETURN;
            } 
            // fall through
          case 65: break;
          case 28: 
            { return ACSScriptTypes.GLOBAL;
            } 
            // fall through
          case 66: break;
          case 29: 
            { return ACSScriptTypes.SCRIPT;
            } 
            // fall through
          case 67: break;
          case 30: 
            { return ACSScriptTypes.SWITCH;
            } 
            // fall through
          case 68: break;
          case 31: 
            { return ACSScriptTypes.REOPEN;
            } 
            // fall through
          case 69: break;
          case 32: 
            { return ACSScriptTypes.INCLUDE;
            } 
            // fall through
          case 70: break;
          case 33: 
            { return ACSScriptTypes.DEFAULT;
            } 
            // fall through
          case 71: break;
          case 34: 
            { return ACSScriptTypes.RESPAWN;
            } 
            // fall through
          case 72: break;
          case 35: 
            { return ACSScriptTypes.FUNCTION;
            } 
            // fall through
          case 73: break;
          case 36: 
            { return ACSScriptTypes.UNLOADING;
            } 
            // fall through
          case 74: break;
          case 37: 
            { return ACSScriptTypes.LIGHTNING;
            } 
            // fall through
          case 75: break;
          case 38: 
            { return ACSScriptTypes.DISCONNECT;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
